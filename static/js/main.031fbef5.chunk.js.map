{"version":3,"sources":["logo.svg","ListCom.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListCom","props","useState","line","setLine","className","onClick","style","textDecoration","text","App","item","setItem","newItem","setNewItem","type","value","placeholder","onChange","event","target","Button","preValue","map","val","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,uJCkB5BC,EAhBC,SAACC,GAAW,IAAD,EACDC,oBAAS,GADR,mBAClBC,EADkB,KACZC,EADY,KAKzB,OACE,yBAAKC,UAAU,cACb,0BAAMC,QALI,WACZF,GAAQ,KAKJ,kBAAC,IAAD,CAAYC,UAAU,gBAExB,wBAAIE,MAAO,CAAEC,eAAgBL,EAAO,eAAiB,SAClDF,EAAMQ,Q,yBC+BAC,MApCf,WAAgB,IAAD,EACQR,qBADR,mBACNS,EADM,KACDC,EADC,OAEcV,mBAAS,IAFvB,mBAENW,EAFM,KAEEC,EAFF,KAYb,OACA,oCACE,yBAAKT,UAAU,YACb,yBAAKA,UAAU,cACf,6BACA,yCACA,6BACA,2BAAOU,KAAK,OAAOC,MAAOL,EAC1BM,YAAY,eAAeC,SAjBf,SAACC,GACjBP,EAAQO,EAAMC,OAAOJ,UAiBjB,kBAACK,EAAA,EAAD,CAAQhB,UAAU,SAASC,QAfZ,WACnBQ,GAAW,SAACQ,GACZ,MAAM,GAAN,mBAAUA,GAAV,CAAmBX,OAElBC,EAAQ,OAYL,kBAAC,IAAD,OAEA,6BACA,4BAEAC,EAAQU,KAAI,SAACC,GAAQ,OAAO,kBAAC,EAAD,CAASf,KAAMe,YCvB7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.031fbef5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nconst ListCom = (props) => {\r\n  const [line, setLine] = useState(false);\r\n  const cutIt = () => {\r\n    setLine(true);\r\n  };\r\n  return (\r\n    <div className=\"todo_style\">\r\n      <span onClick={cutIt}>\r\n        <DeleteIcon className=\"deleteIcon\" />\r\n      </span>\r\n      <li style={{ textDecoration: line ? \"line-through\" : \"none\" }}>\r\n        {props.text}\r\n      </li>\r\n    </div>\r\n  );\r\n};\r\nexport default ListCom;","import React,{useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListCom from './ListCom';\nimport Button from '@material-ui/core/Button';\nimport LibraryAddIcon from '@material-ui/icons/LibraryAdd';\n\n\nfunction App() {\n  const [item,setItem]=useState();\n  const [newItem,setNewItem]=useState([]);\n  const itemEvent=(event)=>{\n  setItem(event.target.value)\n  }\n  const listOfItems =()=>{\n  setNewItem((preValue)=>{\n  return[...preValue,item];\n  });\n   setItem(\" \");\n  };\n  return (\n  <>\n    <div className=\"main_div\">\n      <div className=\"center_div\">\n      <br/>\n      <h1>ToDo List</h1>\n      <br/>\n      <input type=\"text\" value={item}\n      placeholder=\"Add New Item\" onChange={itemEvent} />\n      <Button className=\"newBtn\" onClick={listOfItems}>\n      <LibraryAddIcon/>\n      </Button>\n      <br/>\n      <ol>\n      {\n      newItem.map((val)=>{ return <ListCom text={val}/>;})\n      }\n      </ol>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}